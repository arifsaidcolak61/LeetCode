/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 
Given a non-empty, singly linked list with head node head, return a middle node of linked list.

If there are two middle nodes, return the second middle node.
 */
import java.util.LinkedList; 
class Solution {
    public ListNode middleNode(ListNode head) {
        int count = 0 ;
        ListNode temp = head;
        
        while(temp != null){
            count++;
            temp= temp.next;
        }
        temp = head;
        count/=2;
        while(count>0){
            temp= temp.next;
            count--;
        }
        return temp;
    }
}
